name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  BOT_SERVER_URL: ${{ secrets.BOT_SERVER_URL }}
  REPO_LINK: "https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
  GITHUB_ACTOR: ${{ github.actor }}
  COMMIT_HASH: ${{ github.sha }}
  COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
  DEPLOY_TIME: ${{ github.event.head_commit.timestamp }}

jobs:
  build_and_package:
    name: Build and Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-

      - name: Install dependencies
        run: pnpm install
      - name: Notify on failure - Dependencies
        if: failure()
        run: |
          curl -X POST "$BOT_SERVER_URL" \
               -H "Content-Type: application/json" \
               -d "{\"status\": \"fail\", \"message\": \"❌ Dependency installation failed!\", 
               \"repository\": \"$REPO_LINK\", \"triggered_by\": \"$GITHUB_ACTOR\", 
               \"commit_hash\": \"$COMMIT_HASH\", \"change_log\": \"$COMMIT_MESSAGE\", 
               \"time\": \"$DEPLOY_TIME\"}"
          exit 1

      - name: Run ESLint
        run: pnpm run lint
      - name: Notify on failure - ESLint
        if: failure()
        run: |
          curl -X POST "$BOT_SERVER_URL" \
               -H "Content-Type: application/json" \
               -d "{\"status\": \"fail\", \"message\": \"❌ ESLint check failed!\", 
               \"repository\": \"$REPO_LINK\", \"triggered_by\": \"$GITHUB_ACTOR\", 
               \"commit_hash\": \"$COMMIT_HASH\", \"change_log\": \"$COMMIT_MESSAGE\", 
               \"time\": \"$DEPLOY_TIME\"}"
          exit 1

      - name: Build project
        run: pnpm run build
      - name: Notify on failure - Build
        if: failure()
        run: |
          curl -X POST "$BOT_SERVER_URL" \
               -H "Content-Type: application/json" \
               -d "{\"status\": \"fail\", \"message\": \"❌ Build failed!\", 
               \"repository\": \"$REPO_LINK\", \"triggered_by\": \"$GITHUB_ACTOR\", 
               \"commit_hash\": \"$COMMIT_HASH\", \"change_log\": \"$COMMIT_MESSAGE\", 
               \"time\": \"$DEPLOY_TIME\"}"
          exit 1

      - name: Package production files
        run: tar -czf production-files.tar.gz dist

      - name: Upload production files
        uses: actions/upload-artifact@v4
        with:
          name: production-files
          path: production-files.tar.gz

  deploy_to_render:
    name: Deploy to Render
    needs: build_and_package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-files
          path: ./dist

      - name: Trigger Render Deployment
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          RESPONSE=$(curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
               -H "Accept: application/json" \
               -H "Authorization: Bearer $RENDER_API_KEY" \
               -w "%{http_code}" -o /dev/null)
          
          if [ "$RESPONSE" != "200" ]; then
            curl -X POST "$BOT_SERVER_URL" \
               -H "Content-Type: application/json" \
               -d "{\"status\": \"fail\", \"message\": \"❌ Render deployment failed!\", 
               \"repository\": \"$REPO_LINK\", \"triggered_by\": \"$GITHUB_ACTOR\", 
               \"commit_hash\": \"$COMMIT_HASH\", \"change_log\": \"$COMMIT_MESSAGE\", 
               \"time\": \"$DEPLOY_TIME\"}"
            exit 1
          fi

  notify_discord:
    name: Notify Discord on Success
    needs: deploy_to_render
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Send success notification to Discord
        run: |
          curl -X POST "$BOT_SERVER_URL"